---
description: "JavaScript APIs"
layout: "guide"
title: "JavaScript APIs"
category: "Develop"
weight: 5
srcFilePath: src/pages/docs/develop/jsAPI.md
---

{namespace docsDevelopJsApiHtml}

/**
 * @param page
 * @param site
 */
{template .render}
	{call guide.render data="all"}
		{param content kind="html"}
			<h1>JavaScript APIs</h1>
<article id="js-api">
<h2>Full control using JavaScript APIs</h2>
<p>It's easy to create your own screen whenever you want.</p>
<p>Let's say for example that you need a screen that injects the content &quot;Header changed&quot; and &quot;Body changed&quot; on the respective surface elements when you navigate to the path <code>/foo</code>.</p>
{call ElectricCode.render}{param code kind="text"}{literal}function FooScreen() {
  FooScreen.base(this, 'constructor');
}
senna.inherits(FooScreen, senna.Screen);

FooScreen.prototype.cached = true;

FooScreen.prototype.getSurfaceContent = function(surfaceId) {
  switch(surfaceId) {
    case 'header':
      return 'Header changed';
    case 'body':
      return 'Body changed';
  }
};{/literal}{/param}{param mode: 'text' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Senna - hello</title>
  <!-- Senna optional styles -->
  <link rel="stylesheet" href="../build/senna.css">
  <!-- Senna -->
  <script src="../build/senna-debug.js"></script>
</head>
<body>
  <!-- Content surface -->
  <div id="header">
    Header
  </div>
  <div id="body">
    Body
  </div>
  <!-- End of content surface -->
  <script>
    var app = new senna.App();
    app.addSurfaces(['header', 'body']);
    app.addRoutes(new senna.Route('/foo', FooScreen));
  </script>
</body>
</html>{/literal}{/param}{param mode: 'html' /}{/call}</article>
			<input type="hidden" value="{$page.title}">
			<input type="hidden" value="{$site.title}">
		{/param}
	{/call}
{/template}


/**
 *
 */
{template .soyweb}
	{call base.render data="all"}
		{param content kind="html"}
			{call .render data="all" /}
		{/param}
	{/call}
{/template}
