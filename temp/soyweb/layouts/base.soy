{namespace base}

/**
 * @param content
 * @param page
 * @param serialized
 * @param site
 * @param? scripts
 */
{template .render private="true"}
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8">
		<meta content="minimum-scale=1.0, width=device-width" name="viewport">
		<meta name="description" content="{$page.description ?: ''}">

		<title>{$page.title} - {$site.title}</title>

		<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700|Roboto+Mono">
		<link rel="stylesheet" href="/fonts/galano/galano.css">
		<link rel="stylesheet" href="/fonts/icon-12/icon-12.css">
		<link rel="stylesheet" href="/fonts/icon-16/icon-16.css">

		<!-- inject:css -->
		<link rel="stylesheet" href="/vendor/senna/senna.css">
		<link rel="stylesheet" href="/vendor/codemirror/lib/codemirror.css">
		<link rel="stylesheet" href="/vendor/codemirror/theme/dracula.css">
		<!-- endinject -->

		<!-- inject:js -->
		<script src="/js/bundle.js"></script>
		<script src="/vendor/senna/senna.js"></script>
		<script src="/vendor/codemirror/lib/codemirror.js"></script>
		<script src="/vendor/codemirror/mode/css/css.js"></script>
		<script src="/vendor/codemirror/mode/xml/xml.js"></script>
		<script src="/vendor/codemirror/mode/javascript/javascript.js"></script>
		<!-- endinject -->

		<link rel="stylesheet" href="/styles/main.css">
	</head>
	<body data-senna>
		<div data-senna-surface id="wrapper">
			<div class="senna-loading-bar"></div>

			<!-- inject:metal:js -->
				<div id="pageComponent">
	{$content}
</div>

<script>
	var data = JSON.parse({$serialized});

	if (window.electricPageComponent) {lb}
		window.prevElectricPageComponent = window.electricPageComponent;
	{rb}

	window.electricPageComponent = metal.Component.render(metal[data.page.componentName], {lb}
		element: '#pageComponent',
		page: data.page,
		site: data.site
	{rb});
</script>

				<!-- endinject -->
		</div>

		{if $scripts}
			{foreach $script in $scripts}
				<script src="{$script}"></script>
			{/foreach}
		{/if}

		<!-- inject:vendor:js -->
		<script>
	CodeMirror.defaults.lineNumbers = true;
	CodeMirror.defaults.matchBrackets = true;
	CodeMirror.defaults.readOnly = true;
	CodeMirror.defaults.theme = 'dracula';
	CodeMirror.defaults.viewportMargin = Infinity;

	var REGEX_LB = /&#123;/g;

	var REGEX_RB = /&#125;/g;

	function disposePageComponent() {lb}
		if (window.prevElectricPageComponent) {lb}
			window.prevElectricPageComponent.dispose();
		{rb}
	{rb}

	function runCodeMirror() {lb}
		var code = document.querySelectorAll('.code');

		for (var i = 0; i < code.length; i++) {lb}
			// Workaround for soy issue where namespace and template tags are
			// rendered inside literal blocks
			var text = code[i].innerText
				.replace(REGEX_LB, '{lb}')
				.replace(REGEX_RB, '{rb}');

			var editor = CodeMirror(function(elt) {lb}
				var preEl = code[i].parentNode;

				preEl.parentNode.append(elt);
			{rb}, {lb}
				mode: code[i].getAttribute('data-mode') || '',
				value: text
			{rb});
		{rb}
	{rb}

	function runGoogleAnalytics(path) {lb}
		if (ga) {lb}
			ga('set', 'page', path);
			ga('send', 'pageview');
		{rb}
	{rb}

	runCodeMirror();

	document.addEventListener('DOMContentLoaded', function() {lb}
		if (senna) {lb}
			var app = senna.dataAttributeHandler.getApp();
			app.on('endNavigate', function(event) {lb}
				disposePageComponent();
				runCodeMirror();
				runGoogleAnalytics(event.path);
			{rb});
		{rb}
	{rb});

	
		(function(i,s,o,g,r,a,m){lb}i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){lb}
		(i[r].q=i[r].q||[]).push(arguments){rb},i[r].l=1*new Date();a=s.createElement(o),
		m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		{rb})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

		ga('create', 'UA-37033501-5', 'auto');
		ga('send', 'pageview');
	
</script>

		<!-- endinject -->
	</body>
</html>
{/template}