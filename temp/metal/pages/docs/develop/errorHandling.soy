
{namespace docsDevelopErrorHandlingHtml}

/**
 * @param page
 * @param site
 */
{template .render}
	{call guide.render data="all"}
		{param content kind="html"}
			<h1>Error Handling</h1>
<article id="error-handling">
<h2>Error Handling</h2>
<p>It's important to understand how to handle errors when using Senna.js. The three error handling options in Senna.js are Invalid Status, Request Error, and Timeout.</p>
<blockquote>
<p><strong>Invalid Status:</strong></p>
<p>Returns true for an invalid status. Any status code 2xx or 3xx is considered valid.</p>
</blockquote>
<blockquote>
<p><strong>Request Error:</strong></p>
<p>Returns true if there was an error with the request.</p>
</blockquote>
<blockquote>
<p><strong>Timeout:</strong></p>
<p>Returns true if the request timed out.</p>
</blockquote>
<p>With just one simple funciton, you can control how your app handles those errors.</p>
{call ElectricCode.render}{param code kind="text"}{literal}<script>
  var app = new senna.App();

  app.on('endNavigate', function(event) {
    if (event.error) {
      if (event.error.invalidStatus) {
        //do something to handle invalid status
      }

      if (event.error.requestError) {
        //do something to handle an error with the request
      }

      if (event.error.timeout) {
        //do something to handle a timeout
      }

      if (event.error.statusCode == 404) {
        //return "Page Not Found" message
      }
    }
  });
</script>{/literal}{/param}{param mode: 'text' /}{/call}</article>
			<input type="hidden" value="{$page.title}">
			<input type="hidden" value="{$site.title}">
		{/param}
	{/call}
{/template}
